#!/bin/bash

#
# Build A Resin Yocto Script
# --------------------------
#
# HARD ASSUMPTIONS
# * This script resides in a directory called scripts in resin-yocto repository.
# * Build will be created in the directory where resin-yocto was cloned.
# * If build with shared downloads directory this will be assumed in the
# directory where resin-yocto was cloned.
# * Script ran as normal user.
#
# Signed-off-by: Theodor Gherzan <theodor@resin.io>
#

BARYSVERSION=1.0

# Supported machines - each machine needs an IMAGE_<machine> definition
SUPPORTED_MACHINES=(raspberrypi raspberrypi2 beaglebone nitrogen6x parallella-hdmi-resin)
IMAGE_raspberrypi=resin-image
IMAGE_raspberrypi2=resin-image
IMAGE_beaglebone=resin-image-flasher
IMAGE_nitrogen6x=resin-image
IMAGE_parallella_hdmi_resin=resin-image
FSTYPE_raspberrypi=resin-sdcard
FSTYPE_raspberrypi2=resin-sdcard
FSTYPE_beaglebone=resin-sdcard
FSTYPE_nitrogen6x=resin-sdcard
FSTYPE_parallella_hdmi_resin=resin-sdcard

# Default values
COMPRESS_TOOL="xz"
BUILDDIR=build
REMOVEBUILD=no
COMPRESS=no
STAGING=no
SHARED_DOWNLOADS=no
SHARED_SSTATE=no
DRY_RUN=no
LOG=no
LOGFILE=`pwd`/`basename "$0"`.log
MACHINES=
BITBAKEARGS=

function help {
    echo "Usage: "`basename "$0"`" [options]"
    echo
    echo -e "Options:"

    echo -e "\t-h | --help"
    echo -e "\t\t Print this message."

    echo -e "\t-m | --machine"
    echo -e "\t\t Build a supported machine."
    echo -e "\t\t Supported machines:"
    for m in ${SUPPORTED_MACHINES[@]}; do
        echo -e "\t\t\t $m"
    done
    echo -e "\t\t Default: build all supported machines."

    echo -e "\t-k | --continue"
    echo -e "\t\t Run bitbake with \"-k\" argument."
    echo -e "\t\t From bitbake manual:"
    echo -e "\t\t\t Continue as much as possible after an error. While the"
    echo -e "\t\t\t target that failed and anything depending on it cannot"
    echo -e "\t\t\t be built, as much as possible will be built before"
    echo -e "\t\t\t stopping"

    echo -e "\t-c | --compress"
    echo -e "\t\t Run build with compress variable (RESIN_SDIMG_COMPRESSION)"
    echo -e "\t\t using $COMPRESS_TOOL."
    echo -e "\t\t Default: no."

    echo -e "\t-s | --staging"
    echo -e "\t\t Run a staging build."
    echo -e "\t\t Default: no."

    echo -e "\t-r | --remove-build"
    echo -e "\t\t Run a clean build by removing the build directory before"
    echo -e "\t\t building."
    echo -e "\t\t Build directory name is configurable with -b|--build-name."
    echo -e "\t\t Default: no."

    echo -e "\t-b | --build-name"
    echo -e "\t\t Set build directory name."
    echo -e "\t\t If clean build was selected with -r|--remove-build this"
    echo -e "\t\t directory will be removed."
    echo -e "\t\t Default: build."

    echo -e "\t-d | --shared-downloads"
    echo -e "\t\t Build with shared DL_DIR."
    echo -e "\t\t Default: no."

    echo -e "\t--shared-sstate"
    echo -e "\t\t Build with shared SSTATE_DIR."
    echo -e "\t\t Default: no."

    echo -e "\t-l | --log"
    echo -e "\t\t Log in "`basename "$0"`".log."
    echo -e "\t\t Default: no."

    echo -e "\t-n | --dry-run"
    echo -e "\t\t Don't run bitbake bun only configure build as requested."
    echo -e "\t\t Machine is ignored and will need to be modified accordingly"
    echo -e "\t\t in local.conf file or using MACHINE=yyy in front of bitbake"
    echo -e "\t\t commands"
    echo -e "\t\t Default: no."

    echo -e "\t-i | --interactive"
    echo -e "\t\t Run tool in interactive mode."
    echo -e "\t\t Default: no."

    echo -e "\t-v | --version"
    echo -e "\t\t Print version"
}

function log {
    # Address log levels
    case $1 in
        ERROR)
            loglevel=ERROR
            shift
            ;;
        WARN)
            loglevel=WARNING
            shift
            ;;
        *)
            loglevel=LOG
            ;;
    esac
    ENDTIME=$(date +%s)
    if [ "z$LOG" == "zyes" ]; then
        printf "[%09d%s%s\n" "$(($ENDTIME - $STARTTIME))" "][$loglevel]" "$1" | tee -a $LOGFILE
    else
        printf "[%09d%s%s\n" "$(($ENDTIME - $STARTTIME))" "][$loglevel]" "$1"
    fi
    if [ "$loglevel" == "ERROR" ]; then
        exit 1
    fi
}

function check_machine {
    found=0
    for mi in "${SUPPORTED_MACHINES[@]}"; do
        if [ "$1" == "$mi" ]; then
            found=1
            break
        fi
    done
}

# Timer
STARTTIME=$(date +%s)

# Get the absolute script location
pushd `dirname $0` > /dev/null 2>&1
SCRIPTPATH=`pwd`
popd > /dev/null 2>&1

# Backup $@
SCRIPT_ARGUMENTS=$@

# Parse arguments
while [[ $# -ge 1 ]]; do
    i="$1"
    case $i in
        -h|--help)
            help
            exit 0
            ;;
        -m|--machine)
            if [ -z "$2" ]; then
                log ERROR "\"$1\" argument needs a value."
            fi
            check_machine $2
            if [ $found -eq 0 ]; then
                log ERROR "\"$2\" is not a supported machine."
            else
                MACHINES="$MACHINES $2"
                shift
            fi
            ;;
        -k|--continue)
            BITBAKEARGS="$BITBAKEARGS -k"
            ;;
        -c|--compress)
            COMPRESS=yes
            ;;
        -s|--staging)
            STAGING=yes
            ;;
        -r|--remove-build)
            REMOVEBUILD=yes
            ;;
        -b|--build-name)
            if [ -z "$2" ]; then
                log ERROR "\"$1\" argument needs a value."
            fi
            BUILDDIR=$2
            shift
            ;;
        -d|--shared-downloads)
            SHARED_DOWNLOADS=yes
            ;;
        --shared-sstate)
            SHARED_SSTATE=yes
            ;;
        -l|--log)
            LOG=yes
            ;;
        -n|--dry-run)
            DRY_RUN=yes
            ;;
        -i|--interactive)
            echo -n "Supported machines:"
            for m in ${SUPPORTED_MACHINES[@]}; do
                echo -n "$m "
            done
            echo "."
            read -p "Select machines. Space separated or empty for all: " m
            MACHINES=$m
            for m in $MACHINES; do
                check_machine $m
                if [ $found -eq 0 ]; then
                    log ERROR "\"$m\" is not a supported machine."
                fi
            done

            read -p "Run bitbake with \"-k\"? yes/[no] " yn
            case $yn in
                [Yy]* ) BITBAKEARGS="$BITBAKEARGS -k";;
            esac

            read -p "Compress final images with $COMPRESS_TOOL? yes/[no] " yn
            case $yn in
                [Yy]* ) COMPRESS=yes;;
            esac

            read -p "Staging builds? yes/[no] " yn
            case $yn in
                [Yy]* ) STAGING=yes;;
            esac

            read -p "Remove build directory? yes/[no] " yn
            case $yn in
                [Yy]* ) REMOVEBUILD=yes;;
            esac

            read -p "Build name? [$BUILDDIR] " $BUILDDIR

            read -p "Shared downloads directory? yes/[no] " yn
            case $yn in
                [Yy]* ) SHARED_DOWNLOADS=yes;;
            esac

            read -p "Shared sstate directory? yes/[no] " yn
            case $yn in
                [Yy]* ) SHARED_SSTATE=yes;;
            esac

            read -p "Generate log? yes/[no] " yn
            case $yn in
                [Yy]* ) LOG=yes;;
            esac

            read -p "Dry run? yes/[no] " yn
            case $yn in
                [Yy]* ) DRY_RUN=yes;;
            esac

            # This is interactive so just abort arguments parsing
            break
            ;;
        -v|--version )
            echo $BARYSVERSION
            exit 0
            ;;
        *)
            log ERROR "Unrecognized option $1."
            ;;
    esac
    shift
done

# LOGFILE init and header
if [ "z$LOG" == "zyes" ]; then
    echo "================"`basename "$0"`" HEADER START====================" > $LOGFILE
    date >> $LOGFILE
    echo "Script called from: "`pwd` >> $LOGFILE
    echo "Script called as: $0 $SCRIPT_ARGUMENTS" >> $LOGFILE
    echo "Selected machines: $MACHINES" >> $LOGFILE
    echo "Selected bitbake arguments: $BITBAKEARGS" >> $LOGFILE
    echo "Build directory name: $BUILDDIR" >> $LOGFILE
    echo "Remove build directory? $REMOVEBUILD" >> $LOGFILE
    echo "Compressed image? $COMPRESS" >> $LOGFILE
    echo "Shared downloads directory? $SHARED_DOWNLOADS" >> $LOGFILE
    echo "Shared sstate directory? $SHARED_SSTATE" >> $LOGFILE
    echo "Staging builds? $STAGING" >> $LOGFILE
    echo "================"`basename "$0"`" HEADER STOP=====================" >> $LOGFILE
fi

# Make sure some layers are in place
if [ ! -d "$SCRIPTPATH/../poky" ]; then
    log ERROR "No poky layer found. You forgot to \"./repo sync\"?"
fi
if [ ! -d "$SCRIPTPATH/../meta-resin" ]; then
    log ERROR "No meta-resin layer found. You forgot to \"./repo sync\"?"
fi

if [ "x$REMOVEBUILD" == "xyes" ]; then
    log "Removing old build in $SCRIPTPATH/../$BUILDDIR."
    log "This might take a while ..."
    rm -rf $SCRIPTPATH/../$BUILDDIR
fi

# Move to resin-yocto
cd $SCRIPTPATH/..

# Configure build
export TEMPLATECONF=../meta-resin/meta-resin-common/conf/
source poky/oe-init-build-env $BUILDDIR
if [ "x$STAGING" == "xyes" ]; then
    sed -i "s/.*RESIN_STAGING_BUILD ?=.*/RESIN_STAGING_BUILD ?= \"yes\"/g" conf/local.conf
fi
if [ "x$COMPRESS" == "xyes" ]; then
    sed -i "s/.*RESIN_SDIMG_COMPRESSION ?=.*/RESIN_SDIMG_COMPRESSION ?= \"${COMPRESS_TOOL}\"/g" conf/local.conf
fi
if [ "x$SHARED_DOWNLOADS" == "xyes" ]; then
    sed -i "s#.*DL_DIR ?=.*#DL_DIR ?= \"$SCRIPTPATH/../shared-downloads\"#g" conf/local.conf
fi
if [ "x$SHARED_SSTATE" == "xyes" ]; then
    sed -i "s#.*SSTATE_DIR ?=.*#SSTATE_DIR ?= \"$SCRIPTPATH/../shared-sstate\"#g" conf/local.conf
fi
log "Resin build initialized in $BUILDDIR."

# Start builds
if [ "$DRY_RUN" == "yes" ]; then
  log "Dry run requested so don't start builds."
  log WARN "Don't forget to setup build MACHINE as this script ignores it in dry run mode."
else
  if [ -z "$MACHINES" ]; then
      ITERATOR_MACHINES="${SUPPORTED_MACHINES[@]}"
  else
      ITERATOR_MACHINES="$MACHINES"
  fi
  for machine in $ITERATOR_MACHINES; do
      IMAGE_VAR=`echo "IMAGE_$machine" | sed 's/-/_/g'`
      if [ -z "${!IMAGE_VAR}" ]; then
          log ERROR "No target image defined for $machine."
      fi
      log "Run build for $machine: MACHINE=$machine bitbake ${!IMAGE_VAR} $BITBAKEARGS"
      log "This might take a while ..."
      env MACHINE=$machine bitbake ${!IMAGE_VAR} $BITBAKEARGS
      if [ $? -eq 0 ]; then
          log "Build for $machine suceeded."
      else
          log "Build for $machine failed. Check failed log in $BUILDDIR/tmp/log/cooker/$machine ."
      fi
  done
  for machine in $ITERATOR_MACHINES; do
        IMAGE_VAR=`echo "IMAGE_$machine" | sed 's/-/_/g'`
        FSTYPE_VAR=`echo "FSTYPE_$machine" | sed 's/-/_/g'`
        log "If build for $machine succeeded, final image should have been generated here:"
        log "   $BUILDDIR/tmp/deploy/images/$machine/${!IMAGE_VAR}-$machine.${!FSTYPE_VAR}"
  done
fi

log "Done."
echo "===================="`basename "$0"`" STOP========================" >> $LOGFILE

exit 0
